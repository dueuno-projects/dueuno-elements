import org.asciidoctor.gradle.jvm.AsciidoctorJPlugin
import org.grails.gradle.plugin.core.GrailsPluginGradlePlugin
import org.grails.gradle.plugin.web.GrailsWebGradlePlugin

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/restricted' }
    }
    dependencies { // Not Published to Gradle Plugin Portal
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle"
        classpath platform("org.apache.grails:grails-bom:7.0.0-M4")
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "org.apache.grails:grails-gradle-plugins"
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm:4.0.0-alpha.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-jvm-pdf:4.0.0-alpha.1'
        classpath 'org.asciidoctor.jvm.convert:org.asciidoctor.jvm.convert.gradle.plugin:3.3.2'
    }
}

group = projectGroup
version = projectVersion

apply plugin: "groovy"
apply plugin: "codenarc"
apply plugin: "eclipse"
apply plugin: "idea"

compileJava.options.release = javaVersion.toInteger()

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

subprojects { project ->

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/restricted' }
//        maven { url = 'https://repository.apache.org/content/groups/snapshots' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    plugins.withType(JavaLibraryPlugin) {
        println "LIBRARY: ${project.name}"

        dependencies {
            implementation "org.apache.groovy:groovy-all:${groovyVersion}"
            implementation "ch.qos.logback:logback-classic:1.2.12"
        }
    }

    plugins.withType(GrailsPluginGradlePlugin) {
        println "PLUGIN: ${project.name}"

        project.apply plugin: "java-library"
        project.apply plugin: "org.apache.grails.gradle.grails-gsp"
        project.apply plugin: "com.bertramlabs.asset-pipeline"

        dependencies {
            profile "org.apache.grails.profiles:web-plugin"
            developmentOnly "org.webjars.npm:bootstrap"
            developmentOnly "org.webjars.npm:bootstrap-icons"
            developmentOnly "org.webjars.npm:jquery"
            implementation platform("org.apache.grails:grails-bom:$grailsVersion")
            implementation "org.apache.grails:grails-core"
            implementation "org.apache.grails:grails-data-hibernate5"
            implementation "org.apache.grails:grails-databinding"
            implementation "org.apache.grails:grails-gsp"
            implementation "org.apache.grails:grails-i18n"
            implementation "org.apache.grails:grails-interceptors"
            implementation "org.apache.grails:grails-logging"
            implementation "org.apache.grails:grails-rest-transforms"
            implementation "org.apache.grails:grails-scaffolding"
            implementation "org.apache.grails:grails-services"
            implementation "org.apache.grails:grails-url-mappings"
            implementation "org.apache.grails:grails-web-boot"
            implementation "org.springframework.boot:spring-boot-autoconfigure"
            implementation "org.springframework.boot:spring-boot-starter"
            implementation "org.springframework.boot:spring-boot-starter-actuator"
            implementation "org.springframework.boot:spring-boot-starter-logging"
            implementation "org.springframework.boot:spring-boot-starter-tomcat"
            implementation "org.springframework.boot:spring-boot-starter-validation"
            console "org.apache.grails:grails-console"
            runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails"
            runtimeOnly "com.h2database:h2"
            runtimeOnly "com.zaxxer:HikariCP"
            runtimeOnly "org.fusesource.jansi:jansi"
            testImplementation "org.apache.grails:grails-testing-support-datamapping"
            testImplementation "org.apache.grails:grails-testing-support-web"
            testImplementation "org.spockframework:spock-core"
        }

        assets {
            minifyOptions = [
                    //SIMPLE (default) or ADVANCED or WHITESPACE_ONLY
                    optimizationLevel: "SIMPLE",
            ]
            excludes = [
                    'webjars/jquery/**',
                    'webjars/bootstrap/**',
                    'webjars/bootstrap-icons/**'
            ]
            includes = [
                    'webjars/jquery/*/dist/jquery.js',
                    'webjars/bootstrap/*/dist/js/bootstrap.bundle.js',
                    'webjars/bootstrap/*/dist/css/bootstrap.css',
                    'webjars/bootstrap-icons/*/font/bootstrap-icons.css',
                    'webjars/bootstrap-icons/*/font/fonts/*',
            ]
        }

    }

    plugins.withType(GrailsWebGradlePlugin) {
        println "WEB: ${name}"

        project.apply plugin: "org.apache.grails.gradle.grails-gsp"
        project.apply plugin: "com.bertramlabs.asset-pipeline"

        dependencies {
            profile "org.apache.grails.profiles:web"
            developmentOnly "org.webjars.npm:bootstrap"
            developmentOnly "org.webjars.npm:bootstrap-icons"
            developmentOnly "org.webjars.npm:jquery"
            implementation platform("org.apache.grails:grails-bom:7.0.0-M4")
            implementation "org.apache.grails:grails-core"
            implementation "org.apache.grails:grails-data-hibernate5"
            implementation "org.apache.grails:grails-databinding"
            implementation "org.apache.grails:grails-gsp"
            implementation "org.apache.grails:grails-i18n"
            implementation "org.apache.grails:grails-interceptors"
            implementation "org.apache.grails:grails-logging"
            implementation "org.apache.grails:grails-rest-transforms"
            implementation "org.apache.grails:grails-scaffolding"
            implementation "org.apache.grails:grails-services"
            implementation "org.apache.grails:grails-url-mappings"
            implementation "org.apache.grails:grails-web-boot"
            implementation "org.springframework.boot:spring-boot-autoconfigure"
            implementation "org.springframework.boot:spring-boot-starter"
            implementation "org.springframework.boot:spring-boot-starter-actuator"
            implementation "org.springframework.boot:spring-boot-starter-logging"
            implementation "org.springframework.boot:spring-boot-starter-tomcat"
            implementation "org.springframework.boot:spring-boot-starter-validation"
            console "org.apache.grails:grails-console"
            runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails"
            runtimeOnly "com.h2database:h2"
            runtimeOnly "com.zaxxer:HikariCP"
            runtimeOnly "org.fusesource.jansi:jansi"
            integrationTestImplementation testFixtures("org.apache.grails:grails-geb")
            testImplementation "org.apache.grails:grails-testing-support-datamapping"
            testImplementation "org.apache.grails:grails-testing-support-web"
            testImplementation "org.spockframework:spock-core"
        }

        assets {
            packagePlugin = true
            minifyCss = true
            minifyJs = true
            minifyOptions = [
                    //SIMPLE (default) or ADVANCED or WHITESPACE_ONLY
                    optimizationLevel: "SIMPLE",
            ]
            excludes = [
                    'webjars/jquery/**',
                    'webjars/bootstrap/**',
                    'webjars/bootstrap-icons/**'
            ]
            includes = [
                    'webjars/jquery/*/dist/jquery.js',
                    'webjars/bootstrap/*/dist/js/bootstrap.bundle.js',
                    'webjars/bootstrap/*/dist/css/bootstrap.css',
                    'webjars/bootstrap-icons/*/font/bootstrap-icons.css',
                    'webjars/bootstrap-icons/*/font/fonts/*',
            ]
        }
    }

    plugins.withType(AsciidoctorJPlugin) {
        println "ASCIIDOCTOR: ${project.name}"

        asciidoctor {
            attributes = [
                    "application-name"  : projectName,
                    "revnumber"         : projectVersion,
                    "version-java"      : javaVersion,
                    "version-grails"    : "7.0.0-M4",
                    "source-highlighter": "coderay",
                    "icons"             : "font",
                    "toc"               : "left",
                    "toclevels"         : 2,
            ]

            baseDirFollowsSourceDir()

            outputDir = file("${projectDir}/docs/")
            outputOptions {
                backends = ["html5"]
            }
        }
    }

    plugins.withType(MavenPublishPlugin) {
        println "PUBLISH: ${project.name}"

        project.apply plugin: "signing"

        java {
            withJavadocJar()
            withSourcesJar()
        }

        jar {
            into("META-INF/maven/$project.group/$project.name") {
                from { generatePomFileForMavenJavaPublication }
                rename ".*", "pom.xml"
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = project.name
                    from components.java
                    pom {
                        name = project.name
                        url = "https://dueuno.com"
                        licenses {
                            license {
                                name = "The Apache License, Version 2.0"
                                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            }
                        }
                        developers {
                            developer {
                                id = "gianluca.sartori"
                                name = "Gianluca Sartori"
                                email = "g.sartori@gmail.com"
                            }
                            developer {
                                id = "francesco.piceghello"
                                name = "Francesco Piceghello"
                                email = "f.piceghello@gmail.com"
                            }
                        }
                    }
                }
            }

            Boolean isSnapshot = version.endsWith("SNAPSHOT")
            String repositoryUrl = isSnapshot ? repositorySnapshot : repositoryRelease
            repositories {
                maven {
                    name "OSSRH"
                    url repositoryUrl
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }

}


